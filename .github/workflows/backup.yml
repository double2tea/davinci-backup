name: DaVinci Database Backup

on:
  schedule:
    # 每天北京时间上午10点执行（UTC 2点）
    - cron: '0 2 * * *'
  workflow_dispatch: # 允许手动触发

jobs:
  backup:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup PostgreSQL 17 client (Docker)
      run: |
        # 使用 Docker 确保 PostgreSQL 17 版本匹配
        docker pull postgres:17
        echo "✅ PostgreSQL 17 Docker 镜像已准备就绪"
        
    - name: Create backup
      env:
        SUPABASE_HOST: ${{ secrets.SUPABASE_HOST }}
        SUPABASE_USER: ${{ secrets.SUPABASE_USER }}
        SUPABASE_PASSWORD: ${{ secrets.SUPABASE_PASSWORD }}
      run: |
        DATE=$(date +"%Y%m%d_%H%M%S")
        BACKUP_FILE="davinci_backup_$DATE.sql"
        
        echo "🔄 开始备份达芬奇数据库..."
        
        # 使用 Docker PostgreSQL 17 创建备份
        docker run --rm \
          -e PGPASSWORD="$SUPABASE_PASSWORD" \
          -v $(pwd):/backup \
          postgres:17 \
          pg_dump \
          -h "$SUPABASE_HOST" \
          -p 6543 \
          -U "$SUPABASE_USER" \
          -d postgres \
          -f "/backup/$BACKUP_FILE" \
          --no-sync \
          --verbose
          
        # 压缩备份
        gzip "$BACKUP_FILE"
        
        # 显示备份信息
        BACKUP_SIZE=$(du -h "${BACKUP_FILE}.gz" | cut -f1)
        echo "✅ 备份完成，文件大小: $BACKUP_SIZE"
        
        echo "BACKUP_FILE=${BACKUP_FILE}.gz" >> $GITHUB_ENV
        
    - name: Upload backup to GitHub Releases
      uses: softprops/action-gh-release@v1
      with:
        tag_name: backup-$(date +"%Y%m%d")
        files: ${{ env.BACKUP_FILE }}
        name: "数据库备份 $(date +'%Y年%m月%d日')"
        body: |
          🗄️ 达芬奇数据库自动备份
          
          📅 备份时间: $(date +'%Y-%m-%d %H:%M:%S UTC')
          📊 备份文件: ${{ env.BACKUP_FILE }}
          
          ## 恢复方法
          1. 下载备份文件
          2. 解压: `gunzip ${{ env.BACKUP_FILE }}`
          3. 恢复: `psql -h host -U user -d postgres < backup.sql`
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Clean old releases (keep last 30)
      uses: dev-drprasad/delete-older-releases@v0.3.2
      with:
        keep_latest: 30
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
